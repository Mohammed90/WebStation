/* Autogenerated from insts.td. DO NOT EDIT */
function disassemble($pc, inst) {
	switch((inst) >>> (0x1a)) {
		case 0x0: {
			switch((inst) & (0x3f)) {
				case 0x0: {
					/* SLL */
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					$shamt = ((inst) >>> (0x6)) & (0x1f);
					return((('sll ') + (regname($rd))) + (((', ') + (regname($rt))) + ((', ') + (('0x') + (hexify($shamt))))));
					break;
				}
				case 0x2: {
					/* SRL */
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					$shamt = ((inst) >>> (0x6)) & (0x1f);
					return((('srl ') + (regname($rd))) + (((', ') + (regname($rt))) + ((', ') + (('0x') + (hexify($shamt))))));
					break;
				}
				case 0x3: {
					/* SRA */
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					$shamt = ((inst) >>> (0x6)) & (0x1f);
					return((('sra ') + (regname($rd))) + (((', ') + (regname($rt))) + ((', ') + (('0x') + (hexify($shamt))))));
					break;
				}
				case 0x4: {
					/* SLLV */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('sllv ') + (regname($rd))) + (((', ') + (regname($rt))) + ((', ') + (regname($rs)))));
					break;
				}
				case 0x6: {
					/* SRLV */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('srlv ') + (regname($rd))) + (((', ') + (regname($rt))) + (', $shamt')));
					break;
				}
				case 0x7: {
					/* SRAV */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('srav ') + (regname($rd))) + (((', ') + (regname($rt))) + (', $shamt')));
					break;
				}
				case 0x8: {
					/* JR */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					return(('jr ') + (regname($rs)));
					break;
				}
				case 0x9: {
					/* JALR */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('jalr ') + (regname($rd))) + ((', ') + (regname($rs))));
					break;
				}
				case 0xc: {
					/* SYSCALL */
					$code = ((inst) >>> (0x6)) & (0xfffff);
					return(('syscall ') + (('0x') + (hexify($code))));
					break;
				}
				case 0xd: {
					/* BREAK */
					$code = ((inst) >>> (0x6)) & (0xfffff);
					return(('break ') + (('0x') + (hexify($code))));
					break;
				}
				case 0x10: {
					/* MFHI */
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return(('mfhi ') + (regname($rd)));
					break;
				}
				case 0x11: {
					/* MTHI */
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return(('mthi ') + (regname($rd)));
					break;
				}
				case 0x12: {
					/* MFLO */
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return(('mflo ') + (regname($rd)));
					break;
				}
				case 0x13: {
					/* MTLO */
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return(('mtlo ') + (regname($rd)));
					break;
				}
				case 0x18: {
					/* MULT */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					return((('mult ') + (regname($rs))) + ((', ') + (regname($rt))));
					break;
				}
				case 0x19: {
					/* MULTU */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					return((('multu ') + (regname($rs))) + ((', ') + (regname($rt))));
					break;
				}
				case 0x1a: {
					/* DIV */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					return((('div ') + (regname($rs))) + ((', ') + (regname($rt))));
					break;
				}
				case 0x1b: {
					/* DIVU */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					return((('divu ') + (regname($rs))) + ((', ') + (regname($rt))));
					break;
				}
				case 0x20: {
					/* ADD */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('add ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x21: {
					/* ADDU */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('addu ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x22: {
					/* SUB */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('sub ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x23: {
					/* SUBU */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('subu ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x24: {
					/* AND */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('and ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x25: {
					/* OR */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('or ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x26: {
					/* XOR */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('xor ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x27: {
					/* NOR */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('nor ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x2a: {
					/* SLT */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('slt ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
				case 0x2b: {
					/* SLTU */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('sltu ') + (regname($rd))) + (((', ') + (regname($rs))) + ((', ') + (regname($rt)))));
					break;
				}
			}
			break;
		}
		case 0x1: {
			switch(((inst) >>> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLTZ */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$imm = (inst) & (0xffff);
					$target = (($pc) + (0x4)) + (signext(0x12, (($imm) << (0x2)) >>> (0x0)));
					return((('bltz ') + (regname($rs))) + ((', ') + (('0x') + (hexify($target)))));
					break;
				}
				case 0x1: {
					/* BGEZ */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$imm = (inst) & (0xffff);
					$target = (($pc) + (0x4)) + (signext(0x12, (($imm) << (0x2)) >>> (0x0)));
					return((('bgez ') + (regname($rs))) + ((', ') + (('0x') + (hexify($target)))));
					break;
				}
				case 0x10: {
					/* BLTZAL */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$imm = (inst) & (0xffff);
					$target = (($pc) + (0x4)) + (signext(0x12, (($imm) << (0x2)) >>> (0x0)));
					return((('bltzal ') + (regname($rs))) + ((', ') + (('0x') + (hexify($target)))));
					break;
				}
				case 0x11: {
					/* BGEZAL */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$imm = (inst) & (0xffff);
					$target = (($pc) + (0x4)) + (signext(0x12, (($imm) << (0x2)) >>> (0x0)));
					return((('bgezal ') + (regname($rs))) + ((', ') + (('0x') + (hexify($target)))));
					break;
				}
			}
			break;
		}
		case 0x2: {
			/* J */
			$imm = (inst) & (0x3ffffff);
			$target = (((($pc) + (0x4)) & (0xf0000000)) >>> (0x0)) + (zeroext(0x1c, (($imm) << (0x2)) >>> (0x0)));
			return(('j ') + (('0x') + (hexify($target))));
			break;
		}
		case 0x3: {
			/* JAL */
			$imm = (inst) & (0x3ffffff);
			$target = (((($pc) + (0x4)) & (0xf0000000)) >>> (0x0)) + (zeroext(0x1c, (($imm) << (0x2)) >>> (0x0)));
			return(('jal ') + (('0x') + (hexify($target))));
			break;
		}
		case 0x4: {
			/* BEQ */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$target = (($pc) + (0x4)) + (signext(0x12, (($imm) << (0x2)) >>> (0x0)));
			return((('beq ') + (regname($rs))) + (((', ') + (regname($rt))) + ((', ') + (('0x') + (hexify($target))))));
			break;
		}
		case 0x5: {
			/* BNE */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$target = (($pc) + (0x4)) + (signext(0x12, (($imm) << (0x2)) >>> (0x0)));
			return((('bne ') + (regname($rs))) + (((', ') + (regname($rt))) + ((', ') + (('0x') + (hexify($target))))));
			break;
		}
		case 0x6: {
			switch(((inst) >>> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BLEZ */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$imm = (inst) & (0xffff);
					$target = (($pc) + (0x4)) + (signext(0x12, (($imm) << (0x2)) >>> (0x0)));
					return((('blez ') + (regname($rs))) + ((', ') + (('0x') + (hexify($target)))));
					break;
				}
			}
			break;
		}
		case 0x7: {
			switch(((inst) >>> (0x10)) & (0x1f)) {
				case 0x0: {
					/* BGTZ */
					$rs = ((inst) >>> (0x15)) & (0x1f);
					$imm = (inst) & (0xffff);
					$target = (($pc) + (0x4)) + (signext(0x12, (($imm) << (0x2)) >>> (0x0)));
					return((('bgtz ') + (regname($rs))) + ((', ') + (('0x') + (hexify($target)))));
					break;
				}
			}
			break;
		}
		case 0x8: {
			/* ADDI */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$eimm = signext(0x10, $imm);
			return((('addi ') + (regname($rt))) + (((', ') + (regname($rs))) + ((', ') + (('0x') + (hexify($eimm))))));
			break;
		}
		case 0x9: {
			/* ADDIU */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$eimm = signext(0x10, $imm);
			return((('addiu ') + (regname($rt))) + (((', ') + (regname($rs))) + ((', ') + (('0x') + (hexify($eimm))))));
			break;
		}
		case 0xa: {
			/* SLTI */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$eimm = signext(0x10, $imm);
			return((('slti ') + (regname($rt))) + (((', ') + (regname($rs))) + ((', ') + (('0x') + (hexify($eimm))))));
			break;
		}
		case 0xb: {
			/* SLTIU */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$eimm = (signext(0x10, $imm)) >>> (0x0);
			return((('sltiu ') + (regname($rt))) + (((', ') + (regname($rs))) + ((', ') + (('0x') + (hexify($eimm))))));
			break;
		}
		case 0xc: {
			/* ANDI */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$eimm = zeroext(0x10, $imm);
			return((('andi ') + (regname($rt))) + (((', ') + (regname($rs))) + ((', ') + (('0x') + (hexify($eimm))))));
			break;
		}
		case 0xd: {
			/* ORI */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$eimm = zeroext(0x10, $imm);
			return((('ori ') + (regname($rt))) + (((', ') + (regname($rs))) + ((', ') + (('0x') + (hexify($eimm))))));
			break;
		}
		case 0xe: {
			/* XORI */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$eimm = zeroext(0x10, $imm);
			return((('xori ') + (regname($rt))) + (((', ') + (regname($rs))) + ((', ') + (('0x') + (hexify($eimm))))));
			break;
		}
		case 0xf: {
			/* LUI */
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			return((('lui ') + (regname($rt))) + ((', ') + (('0x') + (hexify($imm)))));
			break;
		}
		case 0x10: {
			switch(((inst) >>> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('mfc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x2: {
					/* CFCzanonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('cfc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x4: {
					/* MTCzanonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('mtc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x6: {
					/* CTCzanonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('ctc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x10: {
					/* COPzanonymous_4anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x11: {
					/* COPzanonymous_5anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x12: {
					/* COPzanonymous_6anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x13: {
					/* COPzanonymous_7anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x14: {
					/* COPzanonymous_8anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x15: {
					/* COPzanonymous_9anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x16: {
					/* COPzanonymous_10anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x17: {
					/* COPzanonymous_11anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x18: {
					/* COPzanonymous_12anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x19: {
					/* COPzanonymous_13anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1a: {
					/* COPzanonymous_14anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1b: {
					/* COPzanonymous_15anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1c: {
					/* COPzanonymous_16anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1d: {
					/* COPzanonymous_17anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1e: {
					/* COPzanonymous_18anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1f: {
					/* COPzanonymous_19anonymous_0 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
			}
			break;
		}
		case 0x11: {
			switch(((inst) >>> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('mfc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x2: {
					/* CFCzanonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('cfc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x4: {
					/* MTCzanonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('mtc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x6: {
					/* CTCzanonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('ctc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x10: {
					/* COPzanonymous_4anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x11: {
					/* COPzanonymous_5anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x12: {
					/* COPzanonymous_6anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x13: {
					/* COPzanonymous_7anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x14: {
					/* COPzanonymous_8anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x15: {
					/* COPzanonymous_9anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x16: {
					/* COPzanonymous_10anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x17: {
					/* COPzanonymous_11anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x18: {
					/* COPzanonymous_12anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x19: {
					/* COPzanonymous_13anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1a: {
					/* COPzanonymous_14anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1b: {
					/* COPzanonymous_15anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1c: {
					/* COPzanonymous_16anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1d: {
					/* COPzanonymous_17anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1e: {
					/* COPzanonymous_18anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1f: {
					/* COPzanonymous_19anonymous_1 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
			}
			break;
		}
		case 0x12: {
			switch(((inst) >>> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('mfc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x2: {
					/* CFCzanonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('cfc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x4: {
					/* MTCzanonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('mtc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x6: {
					/* CTCzanonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('ctc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x10: {
					/* COPzanonymous_4anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x11: {
					/* COPzanonymous_5anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x12: {
					/* COPzanonymous_6anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x13: {
					/* COPzanonymous_7anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x14: {
					/* COPzanonymous_8anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x15: {
					/* COPzanonymous_9anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x16: {
					/* COPzanonymous_10anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x17: {
					/* COPzanonymous_11anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x18: {
					/* COPzanonymous_12anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x19: {
					/* COPzanonymous_13anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1a: {
					/* COPzanonymous_14anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1b: {
					/* COPzanonymous_15anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1c: {
					/* COPzanonymous_16anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1d: {
					/* COPzanonymous_17anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1e: {
					/* COPzanonymous_18anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1f: {
					/* COPzanonymous_19anonymous_2 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
			}
			break;
		}
		case 0x13: {
			switch(((inst) >>> (0x15)) & (0x1f)) {
				case 0x0: {
					/* MFCzanonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('mfc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x2: {
					/* CFCzanonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('cfc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x4: {
					/* MTCzanonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('mtc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x6: {
					/* CTCzanonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$rt = ((inst) >>> (0x10)) & (0x1f);
					$rd = ((inst) >>> (0xb)) & (0x1f);
					return((('ctc') + (('0x') + (hexify($cop)))) + (((' ') + (regname($rt))) + ((', ') + (('0x') + (hexify($rd))))));
					break;
				}
				case 0x10: {
					/* COPzanonymous_4anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x11: {
					/* COPzanonymous_5anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x12: {
					/* COPzanonymous_6anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x13: {
					/* COPzanonymous_7anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x14: {
					/* COPzanonymous_8anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x15: {
					/* COPzanonymous_9anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x16: {
					/* COPzanonymous_10anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x17: {
					/* COPzanonymous_11anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x18: {
					/* COPzanonymous_12anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x19: {
					/* COPzanonymous_13anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1a: {
					/* COPzanonymous_14anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1b: {
					/* COPzanonymous_15anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1c: {
					/* COPzanonymous_16anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1d: {
					/* COPzanonymous_17anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1e: {
					/* COPzanonymous_18anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
				case 0x1f: {
					/* COPzanonymous_19anonymous_3 */
					$cop = ((inst) >>> (0x1a)) & (0x3);
					$cofun = (inst) & (0x1ffffff);
					return((('cop') + (('0x') + (hexify($cop)))) + ((' ') + (('0x') + (hexify($cofun)))));
					break;
				}
			}
			break;
		}
		case 0x20: {
			/* LB */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$offset = signext(0x10, $imm);
			return((('lb ') + (regname($rt))) + (((', ') + (('0x') + (hexify($offset)))) + ((('(') + (regname($rs))) + (')'))));
			break;
		}
		case 0x21: {
			/* LH */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$offset = signext(0x10, $imm);
			return((('lh ') + (regname($rt))) + (((', ') + (('0x') + (hexify($offset)))) + ((('(') + (regname($rs))) + (')'))));
			break;
		}
		case 0x23: {
			/* LW */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$offset = signext(0x10, $imm);
			return((('lw ') + (regname($rt))) + (((', ') + (('0x') + (hexify($offset)))) + ((('(') + (regname($rs))) + (')'))));
			break;
		}
		case 0x24: {
			/* LBU */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$offset = signext(0x10, $imm);
			return((('lbu ') + (regname($rt))) + (((', ') + (('0x') + (hexify($offset)))) + ((('(') + (regname($rs))) + (')'))));
			break;
		}
		case 0x25: {
			/* LHU */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$offset = signext(0x10, $imm);
			return((('lhu ') + (regname($rt))) + (((', ') + (('0x') + (hexify($offset)))) + ((('(') + (regname($rs))) + (')'))));
			break;
		}
		case 0x28: {
			/* SB */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$offset = signext(0x10, $imm);
			return((('sb ') + (regname($rt))) + (((', ') + (('0x') + (hexify($offset)))) + ((('(') + (regname($rs))) + (')'))));
			break;
		}
		case 0x29: {
			/* SH */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$offset = signext(0x10, $imm);
			return((('sh ') + (regname($rt))) + (((', ') + (('0x') + (hexify($offset)))) + ((('(') + (regname($rs))) + (')'))));
			break;
		}
		case 0x2b: {
			/* SW */
			$rs = ((inst) >>> (0x15)) & (0x1f);
			$rt = ((inst) >>> (0x10)) & (0x1f);
			$imm = (inst) & (0xffff);
			$offset = signext(0x10, $imm);
			return((('sw ') + (regname($rt))) + (((', ') + (('0x') + (hexify($offset)))) + ((('(') + (regname($rs))) + (')'))));
			break;
		}
	}
	return "Unknown instruction. Op=0b" + ((inst >>> 26).toString(2).zeropad(6)) + " (Funct=0b" + ((inst & 0x3f).toString(2).zeropad(6)) + ", Cofunct=0b" + ((inst >>> 0x15) & 0x1f).toString(2).zeropad(5) + ")";
}
